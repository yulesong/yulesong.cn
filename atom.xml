<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宋先生的小屋</title>
  
  <subtitle>生活不苟且</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-20T02:25:00.244Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yule song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swagger注解：@ApiOperation与@ApiImplicitParams使用</title>
    <link href="http://yoursite.com/2019/05/20/swagger-apiOperation-apiParam/"/>
    <id>http://yoursite.com/2019/05/20/swagger-apiOperation-apiParam/</id>
    <published>2019-05-20T01:45:33.000Z</published>
    <updated>2019-05-20T02:25:00.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ApiOperation和-ApiImplicitParams"><a href="#ApiOperation和-ApiImplicitParams" class="headerlink" title="@ApiOperation和@ApiImplicitParams"></a>@ApiOperation和@ApiImplicitParams</h2><p>@ApiOperation不是spring自带的注解是swagger里的<br>com.wordnik.swagger.annotations.ApiOperation;</p><a id="more"></a><p>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     @ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>     @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息<br>        name：参数名<br>        value：参数的汉字说明、解释<br>        required：参数是否必须传<br>        paramType：参数放在哪个地方<br>            · header –&gt; 请求参数的获取：@RequestHeader<br>            · query –&gt; 请求参数的获取：@RequestParam<br>            · path（用于restful接口）–&gt; 请求参数的获取：@PathVariable<br>            · body（不常用）<br>            · form（不常用）<br>        dataType：参数类型，默认String，其它值dataType=”Integer”<br>        defaultValue：参数的默认值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"mobile"</span>,value=<span class="string">"手机号"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"password"</span>,value=<span class="string">"密码"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"age"</span>,value=<span class="string">"年龄"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>,dataType=<span class="string">"Integer"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实体注解-ApiModel和-ApiModelProperty"><a href="#实体注解-ApiModel和-ApiModelProperty" class="headerlink" title="实体注解 @ApiModel和@ApiModelProperty"></a>实体注解 @ApiModel和@ApiModelProperty</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(<span class="string">"用户"</span>)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @ApiModelProperty(<span class="string">"用户ID"</span>)</span><br><span class="line">    private long id;</span><br><span class="line">    @ApiModelProperty(<span class="string">"用户名"</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    @ApiModelProperty(<span class="string">"生日"</span>)</span><br><span class="line">    private Date birth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">注解</th><th style="text-align:right">作用域</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">ApiModel</td><td style="text-align:right">实体类名</td><td style="text-align:center">描述实体</td></tr><tr><td style="text-align:left">ApiModelProperty</td><td style="text-align:right">实体属性</td><td style="text-align:center">描述属性</td></tr></tbody></table><p>实际项目中非常需要写文档，提高Java服务端和Web前端以及移动端的对接效率。</p><p>Swagger是当前最好用的Restful API文档生成的开源项目，通过swagger-spring项目</p><p>实现了与SpingMVC框架的无缝集成功能，方便生成spring restful风格的接口文档，</p><p>同时swagger-ui还可以测试spring restful风格的接口功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ApiOperation和-ApiImplicitParams&quot;&gt;&lt;a href=&quot;#ApiOperation和-ApiImplicitParams&quot; class=&quot;headerlink&quot; title=&quot;@ApiOperation和@ApiImplicitParams&quot;&gt;&lt;/a&gt;@ApiOperation和@ApiImplicitParams&lt;/h2&gt;&lt;p&gt;@ApiOperation不是spring自带的注解是swagger里的&lt;br&gt;com.wordnik.swagger.annotations.ApiOperation;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swagger注解说明" scheme="http://yoursite.com/tags/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解@PathVariable 与 @RequestParam</title>
    <link href="http://yoursite.com/2019/05/17/spring-pathVariable-requestParam/"/>
    <id>http://yoursite.com/2019/05/17/spring-pathVariable-requestParam/</id>
    <published>2019-05-17T08:42:28.000Z</published>
    <updated>2019-05-17T08:48:39.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。<br>示例代码：</p><a id="more"></a><p>@Controller<br>@RequestMapping(“/owners/{ownerId}”)<br>public class RelativePathUriTemplateController {  </p><p>  @RequestMapping(“/pets/{petId}”)<br>  public void findPet(@PathVariable(“ownerId”) String ownerId, @PathVariable(“petId”) String petId, Model model) {<br>    // implementation omitted<br>  }<br>}<br>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>当URL使用 someUrl?id=xxxxxx, 这时的id可通过 @RequestParam注解绑定它传过来的值到方法的参数上。<br> @RequestMapping(“/pets”)<br>  public void findPet(@RequestParam(“id”) String id) {<br>    // implementation omitted<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PathVariable&quot;&gt;&lt;a href=&quot;#PathVariable&quot; class=&quot;headerlink&quot; title=&quot;@PathVariable&quot;&gt;&lt;/a&gt;@PathVariable&lt;/h2&gt;&lt;p&gt;当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。&lt;br&gt;示例代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring注解@PathVariable 与 @RequestParam" scheme="http://yoursite.com/tags/Spring%E6%B3%A8%E8%A7%A3-PathVariable-%E4%B8%8E-RequestParam/"/>
    
  </entry>
  
  <entry>
    <title>win10安装MySQL步骤</title>
    <link href="http://yoursite.com/2019/05/16/win10-mysql/"/>
    <id>http://yoursite.com/2019/05/16/win10-mysql/</id>
    <published>2019-05-16T01:51:11.000Z</published>
    <updated>2019-05-16T02:30:39.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载mysql"><a href="#一、下载mysql" class="headerlink" title="一、下载mysql"></a>一、下载mysql</h2><p>1.在浏览器里打开mysql的官网(<a href="http://www.mysql.com/" target="_blank" rel="noopener">http://www.mysql.com/</a>)<br>2.进入页面顶部的”Downloads”</p><a id="more"></a><p><img src="/img/mysql1.png" alt=""></p><p>3.打开页面底部的“Community(GPL) Downloads”</p><p><img src="/img/mysql2.png" alt=""></p><p>4.在页面中间的位置找到我们windows上要用的下载页面“MySQL on Windows(Installer &amp; Tools)”</p><p><img src="/img/mysql3.png" alt=""></p><p>5.选择第一项”MySQL Installer”</p><p><img src="/img/mysql4.png" alt=""></p><p>6.页面底端找到下载入口“Windows (x86,32-bit), MSI Installer”，点击Download按钮开始下载，共381.4M 注意：MSI格式是指windows的安装程序，下载后直接双击就能进入安装向导的那种，区别于对文件进行解压的安装方式；</p><p><img src="/img/mysql5.png" alt=""></p><p>7.这个页面告诉询问你是否登录，告诉你登录之后有哪些好处，我们不登录，点击页面底部的“No thanks, just start my download.”按钮进入下载页面</p><p><img src="/img/mysql6.png" alt=""></p><p>8.开始下载，等待下载完成（由于直接下载速度太慢，之后我用迅雷下载完成的）</p><p><img src="/img/mysql7.png" alt=""></p><p>9.下载完成</p><p><img src="/img/mysql8.png" alt=""></p><h2 id="二、安装mysql"><a href="#二、安装mysql" class="headerlink" title="二、安装mysql"></a>二、安装mysql</h2><p>1.双击下载好的mysql安装文件“mysql-installer-community-5.7.14.0.msi”打开安装程序，打开后需要稍等一下</p><p><img src="/img/mysql9.png" alt=""></p><p>2.选择安装类型（根据个人需要）</p><p><img src="/img/mysql10.png" alt=""></p><p>3.我只需要安装mysql server，所以选择最后一项“Custom”，选择Custom之后左边的安装流程和右边的描述文字会改变，然后点击”Next”按钮继续</p><p><img src="/img/mysql11.png" alt=""></p><p>4.在这里我们需要从安装程序提供的可安装的产品（Products）中选择我们需要的mysql server</p><p><img src="/img/mysql12.png" alt=""></p><p>我们展开Available Products里的第一项“MySQL Servers”，依次展开其子结点，直到其终端结点，我的操作是64位的，所以选中“MySQL Server 5.7.14 - X64</p><p><img src="/img/mysql13.png" alt=""></p><p>然后点击绿色的向右箭头，将当前Product移动需要安装的列表，然后在右边展开“MySQL Server 5.7.14 - X64”项，取消“Development Components”的勾选（因为我们只需要安装mysql server），之后点击“Next”按钮进入下一步</p><p><img src="/img/mysql14.png" alt=""></p><p>5.点击“Execute”（执行）开始安装，安装过程中会显示安装的Progress（进度），等待安装完成后Status会显示Complete，mysql图标前会出现一个绿色的勾，然后点击“Next”按钮进入产品配置界面</p><p><img src="/img/mysql15.png" alt=""></p><p><img src="/img/mysql16.png" alt=""></p><p>6.点击“Next”按钮进入MySQL Server 的配置</p><p><img src="/img/mysql17.png" alt=""></p><p>Config Type选择“Development Machine”，选择此项将使用较小的内容来运行我们的mysql server，对应小型软件、学习是完全够用的。之后“Next”</p><p><img src="/img/mysql18.png" alt=""></p><p>在Root Account Password设置数据库root账号的密码，我填的是123456所以程序提醒我密码强度为弱，我们需要牢记这个密码，然后点击“Next”</p><p><img src="/img/mysql19.png" alt=""></p><p>这里可以设置mysql server的名称和是否开机启动，我把名称改为了“MySQLZzz1”，取消了开机启动，其它的没改，点击“Next”</p><p><img src="/img/mysql20.png" alt=""></p><p>点击“Next”</p><p><img src="/img/mysql21.png" alt=""></p><p>此界面将之前设置的配置内容应用到我们的mysql server，点击“Execute”，等待完成就可以了</p><p><img src="/img/mysql22.png" alt=""></p><p>配置完成，点击“Finish”完成配置环节</p><p><img src="/img/mysql23.png" alt=""></p><p>7.配置完成后将回到安装程序，我们点击“Next”继续</p><p><img src="/img/mysql24.png" alt=""></p><p>提示我们安装完成，点击“Finish”</p><p><img src="/img/mysql25.png" alt=""></p><h2 id="三、测试是否安装成功我们使用MySQL管理软件（Navicat-for-MySQL）进行连接测试，确保mysql已经可以使用："><a href="#三、测试是否安装成功我们使用MySQL管理软件（Navicat-for-MySQL）进行连接测试，确保mysql已经可以使用：" class="headerlink" title="三、测试是否安装成功我们使用MySQL管理软件（Navicat for MySQL）进行连接测试，确保mysql已经可以使用："></a>三、测试是否安装成功我们使用MySQL管理软件（Navicat for MySQL）进行连接测试，确保mysql已经可以使用：</h2><p>这里我提供sqlNavicat怎么安装：就是傻瓜安装方法，安装好之后你们会遇到要求注册，直接解压我给你们的破解软件点击一下，在重新打开Navicat就ok拉：</p><p>Navicat安装百度云地址：<a href="http://pan.baidu.com/s/1eSb7qpW" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSb7qpW</a></p><p>破解Navicat软件百度云地址：<a href="http://pan.baidu.com/s/1kVf0QQr" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVf0QQr</a></p><p>1.打开Navicat for MySQL</p><p>2.新建一个连接，填写连接信息：连接名称：用于区分不同的连接，自己命名即可主机名：localhost端口：3306用户名：root密码：123456（之前配置mysql的时候填写的密码）</p><p><img src="/img/mysql26.png" alt=""></p><p>3.点击“连接测试”按钮，弹出连接成功对话框即表示mysql server已开启</p><p>4.之后就是Navicat for MySQL软件的使用另：我们也可以在cmd里，再次输入“net start mysqlzzz1”，若提示“请求的服务已经启动。”表示mysql server已正常启动；</p><p>至此，mysql server在windows 10 64位上就安装完成了。</p><p>参考链接：<a href="https://www.jianshu.com/p/1aba608b21c5" target="_blank" rel="noopener">https://www.jianshu.com/p/1aba608b21c5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、下载mysql&quot;&gt;&lt;a href=&quot;#一、下载mysql&quot; class=&quot;headerlink&quot; title=&quot;一、下载mysql&quot;&gt;&lt;/a&gt;一、下载mysql&lt;/h2&gt;&lt;p&gt;1.在浏览器里打开mysql的官网(&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mysql.com/&lt;/a&gt;)&lt;br&gt;2.进入页面顶部的”Downloads”&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo系列问题之我们换了电脑怎么办</title>
    <link href="http://yoursite.com/2019/05/15/change-env/"/>
    <id>http://yoursite.com/2019/05/15/change-env/</id>
    <published>2019-05-15T03:04:57.000Z</published>
    <updated>2019-05-15T08:02:34.273Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题是我刚开始建站的时候就想到的问题，只是一直没时间做这些，最近有点时间了，处理一下这个问题    </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我们如果换了电脑怎么办？我们把hexo文件从一个电脑cope到另外一个电脑吗?答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们初步的解决方案是把我们的文件提交到git上，利用git来管理它，我是这样解决的：<br>在现有的XXX.github.io项目上创建一个分支来管<br>1.克隆gitHub上的XXX.github.io项目的文件到本地 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yourname/xxx.github.io.git</span><br></pre></td></tr></table></figure><p>2.删除文件夹里除了.git的其他所有文件<br>3.把hexo项目文件下的所有文件全部复制过来<br>4.里面应该有一个叫.gitignore的文件，如果没有就输入 touch .gitignore，创建一个<br>5..gitignore文件里应该是这些内容 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store </span><br><span class="line">Thumbs.db </span><br><span class="line">db.json </span><br><span class="line">*.<span class="built_in">log</span> </span><br><span class="line">node_modules/ </span><br><span class="line">public/ </span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>6.创建一个叫hexo的分支并切换到这个分支上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure></p><p>7.提交复制过来的文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure></p><p>8.提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"新建分支资源文件"</span></span><br></pre></td></tr></table></figure></p><p>9.推送分支到github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure></p><p>到这一步我们就基本上搞定了，以后再跟新了博客就直接 git push就可以了，hexo的操作跟以前一样不变。 </p><p>10.今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，npm install安装依赖之后就可以用了。<br>克隆分支的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/xxx.github.io.git</span><br></pre></td></tr></table></figure></p><p>11.因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。<br>12.这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原文链接：(https://blog.csdn.net/wxl1555/article/details/79293159)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题是我刚开始建站的时候就想到的问题，只是一直没时间做这些，最近有点时间了，处理一下这个问题    &lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;我们如果换了电脑怎么办？我们把hexo文件从一个电脑cope到另外一个电脑吗?答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 基本命令使用</title>
    <link href="http://yoursite.com/2018/06/29/hello-world/"/>
    <id>http://yoursite.com/2018/06/29/hello-world/</id>
    <published>2018-06-29T10:40:41.000Z</published>
    <updated>2019-05-15T08:02:18.621Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
