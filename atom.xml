<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宋先生的小屋</title>
  
  <subtitle>生活不苟且</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-21T08:48:26.666Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yule song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot项目在IntelliJ IDEA中实现热部署</title>
    <link href="http://yoursite.com/2019/05/21/idea-springboot/"/>
    <id>http://yoursite.com/2019/05/21/idea-springboot/</id>
    <published>2019-05-21T03:33:41.000Z</published>
    <updated>2019-05-21T08:48:26.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot项目在IntelliJ-IDEA中实现热部署"><a href="#SpringBoot项目在IntelliJ-IDEA中实现热部署" class="headerlink" title="SpringBoot项目在IntelliJ IDEA中实现热部署"></a>SpringBoot项目在IntelliJ IDEA中实现热部署</h2><h2 id="方式一、-开启idea自动make功能"><a href="#方式一、-开启idea自动make功能" class="headerlink" title="方式一、 开启idea自动make功能"></a>方式一、 开启idea自动make功能</h2><p>1.在IDEA界面按CTRL+SHIFT＋Ａ-&gt;查找 make project automatically -&gt;选中如图：</p><p><img src="/img/idea-springboot1.png" alt=""></p><a id="more"></a><p>2.CTRL+SHIFT+A–&gt;查找Registry–&gt;找到并勾选compiler.automake.allow.when.app.running如图：</p><p><img src="/img/idea-springboot2.png" alt=""></p><p>3.重启IDEA</p><h2 id="方式二、引入spring-boot-devtools依赖"><a href="#方式二、引入spring-boot-devtools依赖" class="headerlink" title="方式二、引入spring-boot-devtools依赖"></a>方式二、引入spring-boot-devtools依赖</h2><p>spring-boot-devtools是一个为开发者服务的一个模块，其中最重要的功能就是自动应用代码更改到最新的App上面去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原理是在发现代码有更改之后，重新启动应用，但是速度比手动停止后再启动更快。其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类(第三方Jar包),另一个ClassLoader加载会更改的类，称为restart ClassLoader,这样在有代码更改的时候，原来的restartClassLoader被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。 </span><br><span class="line">即devtools会自动监听classpath下的文件变动，并且会立即重启应用（发生在保存时机）</span><br></pre></td></tr></table></figure><p>1.添加依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在依赖中开启热部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;<span class="literal">true</span>&lt;/fork&gt;//该配置必须</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>接下来测试一下：<br>1.修改类–&gt;保存：应用会重启<br>2.修改配置文件–&gt;保存：应用会重启<br>3.修改页面–&gt;保存：应用会重启，页面会刷新（原理是将spring.thymeleaf.cache设为false）<br>至此你的IDEA就可以愉快的修改代码了，修改后可以及时的看到效果，无须重启和清除浏览器缓存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot项目在IntelliJ-IDEA中实现热部署&quot;&gt;&lt;a href=&quot;#SpringBoot项目在IntelliJ-IDEA中实现热部署&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot项目在IntelliJ IDEA中实现热部署&quot;&gt;&lt;/a&gt;SpringBoot项目在IntelliJ IDEA中实现热部署&lt;/h2&gt;&lt;h2 id=&quot;方式一、-开启idea自动make功能&quot;&gt;&lt;a href=&quot;#方式一、-开启idea自动make功能&quot; class=&quot;headerlink&quot; title=&quot;方式一、 开启idea自动make功能&quot;&gt;&lt;/a&gt;方式一、 开启idea自动make功能&lt;/h2&gt;&lt;p&gt;1.在IDEA界面按CTRL+SHIFT＋Ａ-&amp;gt;查找 make project automatically -&amp;gt;选中如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/idea-springboot1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot项目在IntelliJ IDEA中实现热部署" scheme="http://yoursite.com/categories/SpringBoot%E9%A1%B9%E7%9B%AE%E5%9C%A8IntelliJ-IDEA%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成swgger2错误解决（No enum constant org.springframework.web.bind.annotation.RequestMethod.Get）</title>
    <link href="http://yoursite.com/2019/05/20/swagger-bug/"/>
    <id>http://yoursite.com/2019/05/20/swagger-bug/</id>
    <published>2019-05-20T08:29:27.000Z</published>
    <updated>2019-05-21T03:53:43.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springboot在集成swagger2启动时遇到如下错误："><a href="#springboot在集成swagger2启动时遇到如下错误：" class="headerlink" title="springboot在集成swagger2启动时遇到如下错误："></a>springboot在集成swagger2启动时遇到如下错误：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: No enum constant org.springframework.web.bind.annotation.RequestMethod.Get</span><br><span class="line">at java.lang.Enum.valueOf(Enum.java:238)</span><br><span class="line">at org.springframework.web.bind.annotation.RequestMethod.valueOf(RequestMethod.java:35)</span><br><span class="line">at springfox.documentation.swagger.readers.operation.OperationHttpMethodReader.apply(OperationHttpMethodReader.java:49)</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsManager.operation(DocumentationPluginsManager.java:120)</span><br><span class="line">at springfox.documentation.spring.web.readers.operation.ApiOperationReader.read(ApiOperationReader.java:73)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">at springfox.documentation.spring.web.scanners.CachingOperationReader<span class="variable">$1</span>.load(CachingOperationReader.java:50)</span><br><span class="line">at springfox.documentation.spring.web.scanners.CachingOperationReader<span class="variable">$1</span>.load(CachingOperationReader.java:48)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$LoadingValueReference</span>.loadFuture(LocalCache.java:3527)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$Segment</span>.loadSync(LocalCache.java:2319)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$Segment</span>.lockedGetOrLoad(LocalCache.java:2282)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$Segment</span>.get(LocalCache.java:2197)</span><br><span class="line">at com.google.common.cache.LocalCache.get(LocalCache.java:3937)</span><br><span class="line">at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3941)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$LocalLoadingCache</span>.get(LocalCache.java:4824)</span><br><span class="line">at com.google.common.cache.LocalCache<span class="variable">$LocalLoadingCache</span>.getUnchecked(LocalCache.java:4830)</span><br><span class="line">at springfox.documentation.spring.web.scanners.CachingOperationReader.read(CachingOperationReader.java:57)</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiDescriptionReader.read(ApiDescriptionReader.java:66)</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiListingScanner.scan(ApiListingScanner.java:89)</span><br><span class="line">at springfox.documentation.spring.web.scanners.ApiDocumentationScanner.scan(ApiDocumentationScanner.java:71)</span><br><span class="line">   at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.scanDocumentation(DocumentationPluginsBootstrapper.java:95)</span><br><span class="line">at springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper.start(DocumentationPluginsBootstrapper.java:154)</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.access<span class="variable">$200</span>(DefaultLifecycleProcessor.java:53)</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor<span class="variable">$LifecycleGroup</span>.start(DefaultLifecycleProcessor.java:360)</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)</span><br><span class="line">at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)</span><br><span class="line">   at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)</span><br><span class="line">at com.wx.wlcx.WlcxApplication.main(WlcxApplication.java:14)</span><br></pre></td></tr></table></figure><p>在controller 中用的是注解@GetMapping,在集成swagger2之前可以正常访问， 那问题就一定处在swagger2相关的code 中， 于是检查在code 中哪里用到了httpmethod, 发现了问题所在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public enum RequestMethod &#123;</span><br><span class="line">    GET,</span><br><span class="line">    HEAD,</span><br><span class="line">    POST,</span><br><span class="line">    PUT,</span><br><span class="line">    PATCH,</span><br><span class="line">    DELETE,</span><br><span class="line">    OPTIONS,</span><br><span class="line">    TRACE;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">RequestMethod</span></span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类中method 方法都是大写， 而我的代码中将method 写成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//api 具体描述</span><br><span class="line">@ApiOperation(value = <span class="string">"根据id查询公司具体信息"</span>, notes = <span class="string">"查询公司所有信息及送货地址"</span>, tags = &#123;<span class="string">"公司查询"</span>&#125;, httpMethod = <span class="string">"Get"</span>)</span><br></pre></td></tr></table></figure><p>这导致swagger 根据httpMethod 去获取enum 类的类型时匹配不到， 于是将<br>httpMethod = “Get” 中的”Get” 改成”GET”即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation(value = <span class="string">"根据id查询公司具体信息"</span>, notes = <span class="string">"查询公司所有信息及送货地址"</span>, tags = &#123;<span class="string">"公司查询"</span>&#125;, httpMethod = <span class="string">"GET"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;springboot在集成swagger2启动时遇到如下错误：&quot;&gt;&lt;a href=&quot;#springboot在集成swagger2启动时遇到如下错误：&quot; class=&quot;headerlink&quot; title=&quot;springboot在集成swagger2启动时遇到如下错误：&quot;&gt;&lt;/a&gt;springboot在集成swagger2启动时遇到如下错误：&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: No enum constant org.springframework.web.bind.annotation.RequestMethod.Get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at java.lang.Enum.valueOf(Enum.java:238)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at org.springframework.web.bind.annotation.RequestMethod.valueOf(RequestMethod.java:35)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at springfox.documentation.swagger.readers.operation.OperationHttpMethodReader.apply(OperationHttpMethodReader.java:49)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at springfox.documentation.spring.web.plugins.DocumentationPluginsManager.operation(DocumentationPluginsManager.java:120)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	at springfox.documentation.spring.web.readers.operation.ApiOperationReader.read(ApiOperationReader.java:73)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springboot集成swgger2错误解决" scheme="http://yoursite.com/categories/springboot%E9%9B%86%E6%88%90swgger2%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="swgger2" scheme="http://yoursite.com/tags/swgger2/"/>
    
  </entry>
  
  <entry>
    <title>Swagger注解：@ApiOperation与@ApiImplicitParams使用</title>
    <link href="http://yoursite.com/2019/05/20/swagger-apiOperation-apiParam/"/>
    <id>http://yoursite.com/2019/05/20/swagger-apiOperation-apiParam/</id>
    <published>2019-05-20T01:45:33.000Z</published>
    <updated>2019-05-21T08:41:08.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ApiOperation和-ApiImplicitParams"><a href="#ApiOperation和-ApiImplicitParams" class="headerlink" title="@ApiOperation和@ApiImplicitParams"></a>@ApiOperation和@ApiImplicitParams</h2><p>@ApiOperation不是spring自带的注解是swagger里的com.wordnik.swagger.annotations.ApiOperation;</p><p>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>    @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息<br>    name：参数名<br>    value：参数的汉字说明、解释<br>    required：参数是否必须传<br>    paramType：参数放在哪个地方</p><a id="more"></a><pre><code>    · header --&gt; 请求参数的获取：@RequestHeader    · query --&gt; 请求参数的获取：@RequestParam    · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable    · body（不常用）    · form（不常用）    dataType：参数类型，默认String，其它值dataType=&quot;Integer&quot;       defaultValue：参数的默认值</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"mobile"</span>,value=<span class="string">"手机号"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"password"</span>,value=<span class="string">"密码"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    @ApiImplicitParam(name=<span class="string">"age"</span>,value=<span class="string">"年龄"</span>,required=<span class="literal">true</span>,paramType=<span class="string">"form"</span>,dataType=<span class="string">"Integer"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实体注解-ApiModel和-ApiModelProperty"><a href="#实体注解-ApiModel和-ApiModelProperty" class="headerlink" title="实体注解 @ApiModel和@ApiModelProperty"></a>实体注解 @ApiModel和@ApiModelProperty</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel(<span class="string">"用户"</span>)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @ApiModelProperty(<span class="string">"用户ID"</span>)</span><br><span class="line">    private long id;</span><br><span class="line">    @ApiModelProperty(<span class="string">"用户名"</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    @ApiModelProperty(<span class="string">"生日"</span>)</span><br><span class="line">    private Date birth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">注解</th><th style="text-align:right">作用域</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">ApiModel</td><td style="text-align:right">实体类名</td><td style="text-align:center">描述实体</td></tr><tr><td style="text-align:left">ApiModelProperty</td><td style="text-align:right">实体属性</td><td style="text-align:center">描述属性</td></tr></tbody></table><p>实际项目中非常需要写文档，提高Java服务端和Web前端以及移动端的对接效率。</p><p>Swagger是当前最好用的Restful API文档生成的开源项目，通过swagger-spring项目</p><p>实现了与SpingMVC框架的无缝集成功能，方便生成spring restful风格的接口文档，</p><p>同时swagger-ui还可以测试spring restful风格的接口功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ApiOperation和-ApiImplicitParams&quot;&gt;&lt;a href=&quot;#ApiOperation和-ApiImplicitParams&quot; class=&quot;headerlink&quot; title=&quot;@ApiOperation和@ApiImplicitParams&quot;&gt;&lt;/a&gt;@ApiOperation和@ApiImplicitParams&lt;/h2&gt;&lt;p&gt;@ApiOperation不是spring自带的注解是swagger里的com.wordnik.swagger.annotations.ApiOperation;&lt;/p&gt;
&lt;p&gt;@ApiImplicitParams：用在请求的方法上，包含一组参数说明&lt;br&gt;    @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息&lt;br&gt;    name：参数名&lt;br&gt;    value：参数的汉字说明、解释&lt;br&gt;    required：参数是否必须传&lt;br&gt;    paramType：参数放在哪个地方&lt;/p&gt;
    
    </summary>
    
      <category term="Swagger注解说明" scheme="http://yoursite.com/categories/Swagger%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
    
    
      <category term="Swagger" scheme="http://yoursite.com/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解@PathVariable 与 @RequestParam</title>
    <link href="http://yoursite.com/2019/05/17/spring-pathVariable-requestParam/"/>
    <id>http://yoursite.com/2019/05/17/spring-pathVariable-requestParam/</id>
    <published>2019-05-17T08:42:28.000Z</published>
    <updated>2019-05-21T08:44:23.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。<br>示例代码：</p><p>@Controller<br>@RequestMapping(“/owners/{ownerId}”)<br>public class RelativePathUriTemplateController {<br><a id="more"></a><br>  @RequestMapping(“/pets/{petId}”)<br>  public void findPet(@PathVariable(“ownerId”) String ownerId, @PathVariable(“petId”) String petId, Model model) {<br>    // implementation omitted<br>  }<br>}<br>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>当URL使用 someUrl?id=xxxxxx, 这时的id可通过 @RequestParam注解绑定它传过来的值到方法的参数上。<br> @RequestMapping(“/pets”)<br>  public void findPet(@RequestParam(“id”) String id) {<br>    // implementation omitted<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PathVariable&quot;&gt;&lt;a href=&quot;#PathVariable&quot; class=&quot;headerlink&quot; title=&quot;@PathVariable&quot;&gt;&lt;/a&gt;@PathVariable&lt;/h2&gt;&lt;p&gt;当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。&lt;br&gt;示例代码：&lt;/p&gt;
&lt;p&gt;@Controller&lt;br&gt;@RequestMapping(“/owners/{ownerId}”)&lt;br&gt;public class RelativePathUriTemplateController {&lt;br&gt;
    
    </summary>
    
      <category term="Spring注解@PathVariable 与 @RequestParam" scheme="http://yoursite.com/categories/Spring%E6%B3%A8%E8%A7%A3-PathVariable-%E4%B8%8E-RequestParam/"/>
    
    
      <category term="Spring注解" scheme="http://yoursite.com/tags/Spring%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>win10安装MySQL步骤</title>
    <link href="http://yoursite.com/2019/05/16/win10-mysql/"/>
    <id>http://yoursite.com/2019/05/16/win10-mysql/</id>
    <published>2019-05-16T01:51:11.000Z</published>
    <updated>2019-05-21T08:36:12.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载mysql"><a href="#一、下载mysql" class="headerlink" title="一、下载mysql"></a>一、下载mysql</h2><p>1.在浏览器里打开mysql的官网(<a href="http://www.mysql.com/" target="_blank" rel="noopener">http://www.mysql.com/</a>)<br>2.进入页面顶部的”Downloads”</p><p><img src="/img/mysql1.png" alt=""></p><a id="more"></a><p>3.打开页面底部的“Community(GPL) Downloads”</p><p><img src="/img/mysql2.png" alt=""></p><p>4.在页面中间的位置找到我们windows上要用的下载页面“MySQL on Windows(Installer &amp; Tools)”</p><p><img src="/img/mysql3.png" alt=""></p><p>5.选择第一项”MySQL Installer”</p><p><img src="/img/mysql4.png" alt=""></p><p>6.页面底端找到下载入口“Windows (x86,32-bit), MSI Installer”，点击Download按钮开始下载，共381.4M 注意：MSI格式是指windows的安装程序，下载后直接双击就能进入安装向导的那种，区别于对文件进行解压的安装方式；</p><p><img src="/img/mysql5.png" alt=""></p><p>7.这个页面告诉询问你是否登录，告诉你登录之后有哪些好处，我们不登录，点击页面底部的“No thanks, just start my download.”按钮进入下载页面</p><p><img src="/img/mysql6.png" alt=""></p><p>8.开始下载，等待下载完成（由于直接下载速度太慢，之后我用迅雷下载完成的）</p><p><img src="/img/mysql7.png" alt=""></p><p>9.下载完成</p><p><img src="/img/mysql8.png" alt=""></p><h2 id="二、安装mysql"><a href="#二、安装mysql" class="headerlink" title="二、安装mysql"></a>二、安装mysql</h2><p>1.双击下载好的mysql安装文件“mysql-installer-community-5.7.14.0.msi”打开安装程序，打开后需要稍等一下</p><p><img src="/img/mysql9.png" alt=""></p><p>2.选择安装类型（根据个人需要）</p><p><img src="/img/mysql10.png" alt=""></p><p>3.我只需要安装mysql server，所以选择最后一项“Custom”，选择Custom之后左边的安装流程和右边的描述文字会改变，然后点击”Next”按钮继续</p><p><img src="/img/mysql11.png" alt=""></p><p>4.在这里我们需要从安装程序提供的可安装的产品（Products）中选择我们需要的mysql server</p><p><img src="/img/mysql12.png" alt=""></p><p>我们展开Available Products里的第一项“MySQL Servers”，依次展开其子结点，直到其终端结点，我的操作是64位的，所以选中“MySQL Server 5.7.14 - X64</p><p><img src="/img/mysql13.png" alt=""></p><p>然后点击绿色的向右箭头，将当前Product移动需要安装的列表，然后在右边展开“MySQL Server 5.7.14 - X64”项，取消“Development Components”的勾选（因为我们只需要安装mysql server），之后点击“Next”按钮进入下一步</p><p><img src="/img/mysql14.png" alt=""></p><p>5.点击“Execute”（执行）开始安装，安装过程中会显示安装的Progress（进度），等待安装完成后Status会显示Complete，mysql图标前会出现一个绿色的勾，然后点击“Next”按钮进入产品配置界面</p><p><img src="/img/mysql15.png" alt=""></p><p><img src="/img/mysql16.png" alt=""></p><p>6.点击“Next”按钮进入MySQL Server 的配置</p><p><img src="/img/mysql17.png" alt=""></p><p>Config Type选择“Development Machine”，选择此项将使用较小的内容来运行我们的mysql server，对应小型软件、学习是完全够用的。之后“Next”</p><p><img src="/img/mysql18.png" alt=""></p><p>在Root Account Password设置数据库root账号的密码，我填的是123456所以程序提醒我密码强度为弱，我们需要牢记这个密码，然后点击“Next”</p><p><img src="/img/mysql19.png" alt=""></p><p>这里可以设置mysql server的名称和是否开机启动，我把名称改为了“MySQLZzz1”，取消了开机启动，其它的没改，点击“Next”</p><p><img src="/img/mysql20.png" alt=""></p><p>点击“Next”</p><p><img src="/img/mysql21.png" alt=""></p><p>此界面将之前设置的配置内容应用到我们的mysql server，点击“Execute”，等待完成就可以了</p><p><img src="/img/mysql22.png" alt=""></p><p>配置完成，点击“Finish”完成配置环节</p><p><img src="/img/mysql23.png" alt=""></p><p>7.配置完成后将回到安装程序，我们点击“Next”继续</p><p><img src="/img/mysql24.png" alt=""></p><p>提示我们安装完成，点击“Finish”</p><p><img src="/img/mysql25.png" alt=""></p><h2 id="三、测试是否安装成功我们使用MySQL管理软件（Navicat-for-MySQL）进行连接测试，确保mysql已经可以使用："><a href="#三、测试是否安装成功我们使用MySQL管理软件（Navicat-for-MySQL）进行连接测试，确保mysql已经可以使用：" class="headerlink" title="三、测试是否安装成功我们使用MySQL管理软件（Navicat for MySQL）进行连接测试，确保mysql已经可以使用："></a>三、测试是否安装成功我们使用MySQL管理软件（Navicat for MySQL）进行连接测试，确保mysql已经可以使用：</h2><p>这里我提供sqlNavicat怎么安装：就是傻瓜安装方法，安装好之后你们会遇到要求注册，直接解压我给你们的破解软件点击一下，在重新打开Navicat就ok拉：</p><p>Navicat安装百度云地址：<a href="http://pan.baidu.com/s/1eSb7qpW" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSb7qpW</a></p><p>破解Navicat软件百度云地址：<a href="http://pan.baidu.com/s/1kVf0QQr" target="_blank" rel="noopener">http://pan.baidu.com/s/1kVf0QQr</a></p><p>1.打开Navicat for MySQL</p><p>2.新建一个连接，填写连接信息：连接名称：用于区分不同的连接，自己命名即可主机名：localhost端口：3306用户名：root密码：123456（之前配置mysql的时候填写的密码）</p><p><img src="/img/mysql26.png" alt=""></p><p>3.点击“连接测试”按钮，弹出连接成功对话框即表示mysql server已开启</p><p>4.之后就是Navicat for MySQL软件的使用另：我们也可以在cmd里，再次输入“net start mysqlzzz1”，若提示“请求的服务已经启动。”表示mysql server已正常启动；</p><p>至此，mysql server在windows 10 64位上就安装完成了。</p><p>参考链接：<a href="https://www.jianshu.com/p/1aba608b21c5" target="_blank" rel="noopener">https://www.jianshu.com/p/1aba608b21c5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、下载mysql&quot;&gt;&lt;a href=&quot;#一、下载mysql&quot; class=&quot;headerlink&quot; title=&quot;一、下载mysql&quot;&gt;&lt;/a&gt;一、下载mysql&lt;/h2&gt;&lt;p&gt;1.在浏览器里打开mysql的官网(&lt;a href=&quot;http://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mysql.com/&lt;/a&gt;)&lt;br&gt;2.进入页面顶部的”Downloads”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/mysql1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="win10安装MySQL步骤" scheme="http://yoursite.com/categories/win10%E5%AE%89%E8%A3%85MySQL%E6%AD%A5%E9%AA%A4/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo系列问题之我们换了电脑怎么办</title>
    <link href="http://yoursite.com/2019/05/15/change-env/"/>
    <id>http://yoursite.com/2019/05/15/change-env/</id>
    <published>2019-05-15T03:04:57.000Z</published>
    <updated>2019-05-20T09:04:21.874Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题是我刚开始建站的时候就想到的问题，只是一直没时间做这些，最近有点时间了，处理一下这个问题    </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我们如果换了电脑怎么办？我们把hexo文件从一个电脑cope到另外一个电脑吗?答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们初步的解决方案是把我们的文件提交到git上，利用git来管理它，我是这样解决的：<br>在现有的XXX.github.io项目上创建一个分支来管<br>1.克隆gitHub上的XXX.github.io项目的文件到本地 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yourname/xxx.github.io.git</span><br></pre></td></tr></table></figure><p>2.删除文件夹里除了.git的其他所有文件<br>3.把hexo项目文件下的所有文件全部复制过来<br>4.里面应该有一个叫.gitignore的文件，如果没有就输入 touch .gitignore，创建一个<br>5..gitignore文件里应该是这些内容 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store </span><br><span class="line">Thumbs.db </span><br><span class="line">db.json </span><br><span class="line">*.<span class="built_in">log</span> </span><br><span class="line">node_modules/ </span><br><span class="line">public/ </span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>6.创建一个叫hexo的分支并切换到这个分支上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure></p><p>7.提交复制过来的文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure></p><p>8.提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"新建分支资源文件"</span></span><br></pre></td></tr></table></figure></p><p>9.推送分支到github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure></p><p>到这一步我们就基本上搞定了，以后再跟新了博客就直接 git push就可以了，hexo的操作跟以前一样不变。 </p><p>10.今后无论什么时候想要在其他电脑上面用hexo写博客，就直接把创建的分支克隆下来，npm install安装依赖之后就可以用了。<br>克隆分支的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/xxx.github.io.git</span><br></pre></td></tr></table></figure></p><p>11.因为上面创建的是一个名字叫hexo的分支，所以这里-b后面的是hexo，再把后面的gitHub的地址换成你自己的hexo博客的地址就可以了。<br>12.这样做完了以后，每次写完博客发布之后不要忘了还要git push把源文件推到分支上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原文链接：(https://blog.csdn.net/wxl1555/article/details/79293159)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题是我刚开始建站的时候就想到的问题，只是一直没时间做这些，最近有点时间了，处理一下这个问题    &lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;我们如果换了电脑怎么办？我们把hexo文件从一个电脑cope到另外一个电脑吗?答案肯定不是这样的，因为这里面有好多依赖包，好几万个文件呢，这样显然不合理&lt;br&gt;
    
    </summary>
    
      <category term="hexo系列问题之我们换了电脑怎么办" scheme="http://yoursite.com/categories/hexo%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98%E4%B9%8B%E6%88%91%E4%BB%AC%E6%8D%A2%E4%BA%86%E7%94%B5%E8%84%91%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 基本命令使用</title>
    <link href="http://yoursite.com/2018/06/29/hello-world/"/>
    <id>http://yoursite.com/2018/06/29/hello-world/</id>
    <published>2018-06-29T10:40:41.000Z</published>
    <updated>2019-05-20T09:00:00.081Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo基本命令" scheme="http://yoursite.com/categories/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
